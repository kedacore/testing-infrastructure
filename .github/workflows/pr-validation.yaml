name: 'Validate PR'

on:
  - pull_request_target

concurrency: terraform

permissions:
  id-token: write
  contents: read
  pull-requests: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      TF_VAR_azure_resource_group_name: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      TF_VAR_keda_sp_name: ${{ secrets.KEDA_SP_NAME }}
      GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      GITHUB_OWNER: kedacore

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Checkout Pull Request
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: checkout
      run: |
        gh pr checkout ${{ github.event.number }}

    - name: Log in to Azure using OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Log in to AWS using OIDC
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: eu-west-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -recursive -check
      continue-on-error: true

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

    - name: Terraform Init
      id: init
      run: |
        terraform init \
        -backend-config=storage_account_name=${{ secrets.BACKEND_STORAGE_ACCOUNT_NAME}} \
        -backend-config=container_name=${{ secrets.BACKEND_STORAGE_CONTAINER_NAME}} \
        -backend-config=key=${{ secrets.BACKEND_STORAGE_KEY}} \
        -backend-config=resource_group_name=${{ secrets.BACKEND_STORAGE_RESOURCE_GROUP_NAME}} \
        -backend-config=subscription_id="$ARM_SUBSCRIPTION_ID"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Create the plan summary
      uses: actions/github-script@v6
      if: always()
      id: summary
      env:
        PLAN: '${{ steps.plan.outputs.stdout }}'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Prep the output
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}*`;
          
          // 2. Set the output variable
          const fs = require('fs');
          fs.writeFileSync('summary.md', output);
          core.setOutput('summary', output);

    - name: Write the step summary
      if: always()
      run: cat summary.md >> $GITHUB_STEP_SUMMARY

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1